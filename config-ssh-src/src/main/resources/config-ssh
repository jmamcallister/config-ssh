#!/bin/bash
##
## Manage local SSH configuration in ~/.ssh/config
##

ECHO="echo -e"
LOGGER_TAG="SSH_CONFIG"
RM=/bin/rm
TMP_FILES=""

die() { ${ECHO} "FATAL: $@" >&2; exit 1; }

prg=$( basename "${BASH_SOURCE[0]}" )
prg_dir=$( cd `dirname "${BASH_SOURCE[0]}"` && pwd )
cmds="show list add remove help"
_usage="Usage: ${prg} { show | list | add | remove | help }
Manage local SSH configuration

Commands:
    show            Display an individual entry. Shows all information
    list [-v|-u]    Display all entries in short format 'alias : hostname'. If
                    -v option is specified, all information is displayed for
                    all entries. If -u option is specfied, entry is shown as
                    'alias : user@hostname'
    add -a ALIAS -h HOSTNAME [-u USER] Add an entry. if -u is not provided,
                    user 'root' is assumed
    remove -a ALIAS Remove entry defined by ALIAS
    help            Display this help
"
[ -r "/usr/local/etc/${prg%.*}.conf" ] && . "/usr/local/etc/${prg%.*}.conf"
[ -r "${prg_dir}/../etc/${prg%.*}.conf" ] && . "${prg_dir}/../etc/${prg%.*}.conf"
[ -r "${prg_dir}/${prg%.*}.conf" ] && . "${prg_dir}/${prg%.*}.conf"

[ -z "${LOGGER}" ] && LOGGER=/usr/bin/logger
[ -z "${LOGGER_INFO_PRIORTY}" ] && LOGGER_INFO_PRIORTY="user.notice"
[ -z "${LOGGER_WARN_PRIORTY}" ] && LOGGER_WARN_PRIORTY="user.notice"
[ -z "${LOGGER_ERROR_PRIORTY}" ] && LOGGER_ERROR_PRIORTY="user.err"
[ -z "${AWK}" ] && AWK=/usr/bin/awk
[ -z "${SSH_CONFIG}" ] && SSH_CONFIG=/home/${USER}/.ssh/config
[ -z "${DEFAULT_USER}" ] && DEFAULT_USER="root"

[ -r ${SSH_CONFIG} ] || die "Unknown database ${SSH_CONFIG}"
#######################################
# Action : 
#   Log at INFO level
# Globals:
#   LOGGER
#   LOGGER_TAG
#   LOGGER_INFO_PRIORTY
# Arguments:
#   Message string
# Returns:
#  
#######################################
info()
{
    if [ ${#} -eq 0 ]; then
        while read data; do
            ${LOGGER} -s \
                -t ${LOGGER_TAG} \
                -p ${LOGGER_INFO_PRIORTY} "INFORMATION: ${data}"
        done
    else
        ${LOGGER} -s \
            -t ${LOGGER_TAG} \
            -p ${LOGGER_INFO_PRIORTY} "INFORMATION: $@"
    fi
}

#######################################
# Action : 
#   Log at WARN level
# Globals:
#   LOGGER
#   LOGGER_TAG
#   LOGGER_INFO_PRIORTY
# Arguments:
#   Message string
# Returns:
#  
#######################################
warn()
{
    if [ ${#} -eq 0 ]; then
        while read data; do
            ${LOGGER} -s \
            -t ${LOGGER_TAG} \
            -p ${LOGGER_WARN_PRIORTY} "WARN: ${data}"
        done
    else
        ${LOGGER} -s \
            -t ${LOGGER_TAG} \
            -p ${LOGGER_WARN_PRIORTY} "WARN: $@"
    fi
}

#######################################
# Action : 
#   Log at ERROR level
# Globals:
#   LOGGER
#   LOGGER_TAG
#   LOGGER_INFO_PRIORTY
# Arguments:
#   Message string
# Returns:
#  
#######################################
error()
{
    if [ ${#} -eq 0 ]; then
        while read data; do
            ${LOGGER} -s \
                -t ${LOGGER_TAG} \
                -p ${LOGGER_ERROR_PRIORTY} "ERROR: ${data}"
        done
    else
        ${LOGGER} -s \
            -t ${LOGGER_TAG} \
            -p ${LOGGER_ERROR_PRIORTY} "ERROR: $@"
    fi
}

#######################################
# Action : 
#   Perform cleanup tasks before
#   exiting script
#   - Remove any temporary files
# Globals:
#   RM
#   TMP_FILES
# Arguments:
#   None
# Returns:
#  
#######################################
cleanup()
{
    for _file in ${TMP_FILES}; do
        ${RM} -f ${_file} || warn "Could not remove file [ ${_file} ]"
    done
}

#######################################
# Action : 
#   - Log info or error message
#   - Perform clean tasks
#   - Exit script with provided status
#     code
# Globals:
#   None
# Arguments:
#   1 - Status code to exit with
#   2 - (Optional) Message to log
# Returns:
#  
#######################################
graceful_exit()
{
    [ "${#}" -gt 1 -a "${1}" -eq 0 ] && info "${2}"
    [ "${#}" -gt 1 -a "${1}" -gt 0 ] && error "${2}"
    cleanup
    exit ${1}
}

show()
{
    for _alias in $@; do
        ${AWK} -v a="Host ${_alias}" '
            {RS="\n\n"}
            $0 ~ a{
                print $0
            }
        ' ${SSH_CONFIG}
    done
}

list()
{
    local OPTIND opt v u _verbose _show_user
    _verbose=false
    _show_user=false
    while getopts ":vu" opt; do
        case "${opt}" in
            v)
                _verbose=true
                ;;
            u)
                _show_user=true
                ;;
            \?)
                die "Invalid option: -$OPTARG"
                ;;
            :)
                die "Option -$OPTARG requires an argument"
                ;;
        esac
    done
    shift $((OPTIND-1))

    if ${_verbose}; then
        ${AWK} '
            {RS="\n\n"}
            /^Host [^\*]/{
                print $0
            }
        ' ${SSH_CONFIG}
    elif ${_show_user}; then
        ${AWK} -v user=${DEFAULT_USER} '
            {OFS="\t: "}
            /^Host [^\*]/ {
                alias=$2;
                hostname="";
                user=""
                while(getline && $0 != ""){
                    if ($0 ~ "HostName")
                        hostname=$2
                    if ($0 ~ "User")
                        user=$2
                }
                print alias,user"@"hostname
            }
        ' ${SSH_CONFIG}        
    else
        ${AWK} '
            {OFS="\t: "}
            /^Host [^\*]/ {
                alias=$2;
                while(getline && $0 != ""){
                    if ($0 ~ "HostName")
                        print alias,$2
                }
            }
        ' ${SSH_CONFIG}
    fi
}

case ${1} in
    show)
        shift
        show "${@}"
        ;;
    list)
        shift
        list ${@}
        ;;
    add)
        echo "Not implemented yet"; exit 0
        ;;
    remove)
        echo "Not implemented yet"; exit 0
        ;;
    help)
        echo "${_usage}"; exit 0
        ;;
    shortlist)
        echo "${cmds}"; exit 0            
        ;;
    *)
        die "Unkown command '${1}'\n${_usage}"
        ;;
esac

graceful_exit 0
